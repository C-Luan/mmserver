generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  output   = "../ERD.svg"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model coligacao {
  uuid        String      @id @default(uuid())
  usuarioUuid String
  ano         Int
  Usuario     Usuario     @relation(fields: [usuarioUuid], references: [uuid])
  Candidatos  Candidato[]
  Eleitores   Eleitor[]
}

model Candidato {
  uuid                         String                     @id @default(uuid())
  nomeCandidato                String
  nomeUrna                     String?
  partido                      String?
  coligacaoUuid                String?
  created_at                   DateTime                   @default(now())
  Usuario                      Usuario[]
  contato                      ContatoCandidato[]
  Eleitor                      Eleitor[]
  coligacao                    coligacao?                 @relation(fields: [coligacaoUuid], references: [uuid])
  localdevotacao_has_candidato PlanejamentoLocalVotacao[]
}

model ContatoCandidato {
  uuidContato String    @id @default(uuid())
  uuidEmpresa String
  Candidato   Candidato @relation(fields: [uuidEmpresa], references: [uuid])
  nomeContato String
  cargo       String
  telefone    String
  whatsapp    String?
  email       String
}

model tipoAtendimento {
  id          Int           @id @default(autoincrement())
  descricao   String
  atendimento atendimento[]
}

model atendimento {
  uuid              String   @id @default(uuid())
  eleitorUuid       String
  usuarioUuid       String //Usuario que criou o atendimento
  responsavelUuid   String // Usuário responsável pelo atendimento
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
  statusAtendimento Int
  tipoAtendimento   Int?

  criado_por  Usuario          @relation("criadorAtendimento", fields: [usuarioUuid], references: [uuid])
  responsavel Usuario          @relation("responsavelAtendimento", fields: [responsavelUuid], references: [uuid])
  eleitor     Eleitor          @relation(fields: [eleitorUuid], references: [uuid], onDelete: Cascade)
  atendimento tipoAtendimento? @relation(fields: [tipoAtendimento], references: [id])
}

model demandaAtendimento {
  uuid       String    @id @default(uuid())
  demanda    String
  observacao String
  prazo      DateTime?
}

model Eleitor {
  uuid            String    @id @default(uuid())
  nomeCompleto    String
  nomeMae         String    @default("")
  coligacaoUuid   String?
  dataNascimento  DateTime?
  indicadopor     String    @default("")
  formiguinha     String?
  candidatoUuid   String
  usuarioUuid     String?
  sessaoEleitoral Int?
  classificacaoId Int?
  created_at      DateTime  @default(now())

  Formiguinha          Eleitor?               @relation("Formiguinhas", fields: [formiguinha], references: [uuid])
  sessaoeleitoral      LocalVotacao?          @relation(fields: [sessaoEleitoral], references: [uuid])
  criado_por           Usuario?               @relation(fields: [usuarioUuid], references: [uuid])
  candidato            Candidato              @relation(fields: [candidatoUuid], references: [uuid])
  classificacao        classificacao?         @relation(fields: [classificacaoId], references: [id])
  coligacao            coligacao?             @relation(fields: [coligacaoUuid], references: [uuid])
  Formiguinhas         Eleitor[]              @relation("Formiguinhas")
  contatoEleitor       contatoEleitor[]
  MidiasSociaisEleitor MidiasSociaisEleitor[]
  DadosPessoaisEleitor DadosPessoaisEleitor[]
  EnderecoEleitor      EnderecoEleitor[]
  atendimento          atendimento[]
}

model contatoEleitor {
  uuid    String @id @default(uuid())
  email   String
  celular String

  Eleitor     Eleitor @relation(fields: [eleitorUuid], references: [uuid], onDelete: Cascade)
  eleitorUuid String
}

model MidiasSociaisEleitor {
  uuid        String  @id @default(uuid())
  instagram   String?
  facebook    String?
  twitter     String?
  tiktok      String?
  Eleitor     Eleitor @relation(fields: [eleitorUuid], references: [uuid], onDelete: Cascade)
  eleitorUuid String
}

model EnderecoEleitor {
  uuid        String   @id @default(uuid())
  latitude    Float
  longitude   Float
  endereco    String?
  nCasa       String?
  cep         String?
  complemento String?
  bairro      String?
  cidade      String?
  codIbge     String?
  uf          String?
  pais        String?
  Eleitor     Eleitor? @relation(fields: [eleitorUuid], references: [uuid], onDelete: Cascade)
  eleitorUuid String?
}

model DadosPessoaisEleitor {
  uuid           String  @id @default(uuid())
  cpf            String?
  rg             String?
  sessao         String
  zona           String
  localdevotacao String
  eleitorUuid    String

  eleitor Eleitor @relation(fields: [eleitorUuid], references: [uuid], onDelete: Cascade)
}

model PlanejamentoLocalVotacao {
  uuid             String        @id @default(uuid())
  localVotacaoUuid Int
  candidatoUuid    String
  cadandidato      Candidato     @relation(fields: [candidatoUuid], references: [uuid])
  Local            LocalVotacao  @relation(fields: [localVotacaoUuid], references: [uuid])
  Expectativa      Expectativa[]
}

model Expectativa {
  localdevotacao_has_CandidatoUuid String @id
  expectativa                      Float  @default(0)

  localvotacao PlanejamentoLocalVotacao @relation(fields: [localdevotacao_has_CandidatoUuid], references: [uuid])
}

model LocalVotacao {
  uuid           Int      @id
  localdevotacao String
  updatedAt      DateTime @updatedAt
  createdaAt     DateTime @default(now())
  totalEleitores Int      @default(0)

  endereco                          EnderecoLocalVotacao[]
  sessoesEleitorais                 SessoesEleitorais[]
  Eleitor                           Eleitor[]
  localdevotacao_has_candidato      PlanejamentoLocalVotacao[]
  LocalVotacao_has_candidatoEleicao LocalVotacao_has_candidatoEleicao[]
}

model Eleicoes {
  uuid              String              @id @default(uuid())
  ano               Int
  descricao         String
  CandidatosEleicao CandidatosEleicao[]
}

model UF {
  id        Int         @id @default(autoincrement())
  descricao String
  municipio Municipio[]
}

model Municipio {
  id        Int    @id @default(autoincrement())
  uFId      Int
  descricao String

  uf                UF                  @relation(fields: [uFId], references: [id])
  CandidatosEleicao CandidatosEleicao[]
}

model CandidatosEleicao {
  sequencial     BigInt @id
  nomecandidato  String
  cargoCandidato String
  municipioId    Int
  numero_urna    Int
  eleicoesUuid   String

  eleicao                           Eleicoes                            @relation(fields: [eleicoesUuid], references: [uuid])
  municipio                         Municipio                           @relation(fields: [municipioId], references: [id])
  LocalVotacao_has_candidatoEleicao LocalVotacao_has_candidatoEleicao[]
}

model LocalVotacao_has_candidatoEleicao {
  uuid                        String @id @default(uuid())
  localVotacaoUuid            Int
  candidatosEleicaoSequencial BigInt

  localvontacao            LocalVotacao               @relation(fields: [localVotacaoUuid], references: [uuid])
  candidatoEleicao         CandidatosEleicao          @relation(fields: [candidatosEleicaoSequencial], references: [sequencial])
  quantidade_votos_eleicao quantidade_votos_eleicao[]
}

model quantidade_votos_eleicao {
  uuidLocal    String                            @id
  votos        Int
  localvotacao LocalVotacao_has_candidatoEleicao @relation(fields: [uuidLocal], references: [uuid])
}

model SessoesEleitorais {
  uuid             String   @id @default(uuid())
  sessao           String
  zona             String
  nVotantes        Int
  localVotacaoUuid Int?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  LocalVotacao LocalVotacao? @relation(fields: [localVotacaoUuid], references: [uuid])
}

model EnderecoLocalVotacao {
  uuid             String @id @default(uuid())
  endereco         String
  bairro           String
  cidade           String
  uf               String
  cep              Int
  latitude         Float
  longitude        Float
  localVotacaoUuid Int?

  LocalVotacao LocalVotacao? @relation(fields: [localVotacaoUuid], references: [uuid])
}

model perfilUso {
  id        Int       @id @default(autoincrement())
  descricao String
  Usuario   Usuario[]
}

model classificacao {
  id          Int    @id @default(autoincrement())
  descricao   String
  hexColor    String
  eleitoruuid String

  eleitor Eleitor[]
}

// dados operadores 
model Usuario {
  uuid                    String   @id @default(uuid())
  nomeCompleto            String
  apelido                 String?
  isAtivo                 Boolean  @default(true)
  uuidCandidato           String
  coordenador             String?
  created_at              DateTime @default(now())
  updated_at              DateTime @updatedAt
  perfil                  Int
  dadosContatoUsuarioUuid String?

  Perfil              perfilUso            @relation(fields: [perfil], references: [id])
  candidato           Candidato            @relation(fields: [uuidCandidato], references: [uuid])
  login               login[]
  contato             DadosContatoUsuario? @relation(fields: [dadosContatoUsuarioUuid], references: [uuid])
  EnderecoUsuario     EnderecoUsuario?     @relation(fields: [enderecoUsuarioUuid], references: [uuid])
  enderecoUsuarioUuid String?
  Eleitor             Eleitor[]
  coligacao           coligacao[]
  atendimentoCriado   atendimento[]        @relation("criadorAtendimento")
  atendimento         atendimento[]        @relation("responsavelAtendimento")
}

model DadosContatoUsuario {
  uuid      String @id @default(uuid())
  whathsapp String
  email     String
  instagram String
  twitter   String
  facebook  String

  Usuario Usuario[]
}

model EnderecoUsuario {
  uuid        String @id @default(uuid())
  endereco    String
  complemento String
  bairro      String
  cidade      String
  estado      String
  cep         String

  Usuario Usuario[]
}

model login {
  Usuario      Usuario  @relation(fields: [Usuario_uuid], references: [uuid], onDelete: Cascade, onUpdate: Cascade)
  Usuario_uuid String   @id @default(uuid())
  autorizado   Boolean
  email        String   @unique
  senha        String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model blacklist {
  tokenexpirado String @id

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}
